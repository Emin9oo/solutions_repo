{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Here\u2019s the correctly formatted version, ensuring that formulas display properly when copied and pasted. Projectile Motion: Definition & Equations Projectile motion refers to the motion of an object launched into the air under the influence of gravity, following a parabolic path . It is analyzed as two independent motions: Horizontal motion \u2013 constant velocity (no horizontal acceleration if air resistance is ignored). Vertical motion \u2013 uniformly accelerated motion due to gravity. Equations of Projectile Motion Let: - \\( v_0 \\) = Initial velocity - \\( \\theta \\) = Launch angle - \\( g \\) = Acceleration due to gravity (9.81 m/s\u00b2) - \\( t \\) = Time 1. Horizontal Motion Velocity: $$ v_x = v_0 \\cos\\theta $$ (Constant, since no horizontal acceleration) Displacement: $$ x = v_0 \\cos\\theta \\cdot t $$ 2. Vertical Motion Velocity: $$ v_y = v_0 \\sin\\theta - g t $$ Displacement: $$ y = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$ Time to reach max height: $$ t_{\\text{max}} = \\frac{v_0 \\sin\\theta}{g} $$ Maximum height: $$ h_{\\text{max}} = \\frac{(v_0 \\sin\\theta)^2}{2g} $$ 3. Time of Flight The total time the projectile is in the air: $$ T = \\frac{2 v_0 \\sin\\theta}{g} $$ 4. Range (Horizontal Distance) The total horizontal distance traveled: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ Key Points The trajectory is a parabola . The horizontal and vertical motions are independent of each other. The optimal launch angle for maximum range is 45\u00b0 (without air resistance). import numpy as np import matplotlib.pyplot as plt Constants g = 9.81 # Gravity (m/s^2) v0 = 20 # Initial velocity (m/s) Function to calculate trajectory def projectile_trajectory(v0, angle): angle_rad = np.radians(angle) t_flight = 2 * v0 * np.sin(angle_rad) / g t = np.linspace(0, t_flight, num=500) x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 return x, y Launch angles to plot angles = [15, 30, 45, 60, 75] Create the plot plt.figure(figsize=(10, 6)) for angle in angles: x, y = projectile_trajectory(v0, angle) plt.plot(x, y, label=f'{angle}\u00b0') plt.title('Projectile Trajectories for Different Launch Angles') plt.xlabel('Distance (m)') plt.ylabel('Height (m)') plt.legend() plt.grid(True) plt.show()","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"Here\u2019s the correctly formatted version, ensuring that formulas display properly when copied and pasted.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#projectile-motion-definition-equations","text":"Projectile motion refers to the motion of an object launched into the air under the influence of gravity, following a parabolic path . It is analyzed as two independent motions: Horizontal motion \u2013 constant velocity (no horizontal acceleration if air resistance is ignored). Vertical motion \u2013 uniformly accelerated motion due to gravity.","title":"Projectile Motion: Definition &amp; Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#equations-of-projectile-motion","text":"Let: - \\( v_0 \\) = Initial velocity - \\( \\theta \\) = Launch angle - \\( g \\) = Acceleration due to gravity (9.81 m/s\u00b2) - \\( t \\) = Time","title":"Equations of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-horizontal-motion","text":"Velocity: $$ v_x = v_0 \\cos\\theta $$ (Constant, since no horizontal acceleration) Displacement: $$ x = v_0 \\cos\\theta \\cdot t $$","title":"1. Horizontal Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-vertical-motion","text":"Velocity: $$ v_y = v_0 \\sin\\theta - g t $$ Displacement: $$ y = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$ Time to reach max height: $$ t_{\\text{max}} = \\frac{v_0 \\sin\\theta}{g} $$ Maximum height: $$ h_{\\text{max}} = \\frac{(v_0 \\sin\\theta)^2}{2g} $$","title":"2. Vertical Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-time-of-flight","text":"The total time the projectile is in the air: $$ T = \\frac{2 v_0 \\sin\\theta}{g} $$","title":"3. Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-range-horizontal-distance","text":"The total horizontal distance traveled: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$","title":"4. Range (Horizontal Distance)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#key-points","text":"The trajectory is a parabola . The horizontal and vertical motions are independent of each other. The optimal launch angle for maximum range is 45\u00b0 (without air resistance). import numpy as np import matplotlib.pyplot as plt","title":"Key Points"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#constants","text":"g = 9.81 # Gravity (m/s^2) v0 = 20 # Initial velocity (m/s)","title":"Constants"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#function-to-calculate-trajectory","text":"def projectile_trajectory(v0, angle): angle_rad = np.radians(angle) t_flight = 2 * v0 * np.sin(angle_rad) / g t = np.linspace(0, t_flight, num=500) x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 return x, y","title":"Function to calculate trajectory"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#launch-angles-to-plot","text":"angles = [15, 30, 45, 60, 75]","title":"Launch angles to plot"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#create-the-plot","text":"plt.figure(figsize=(10, 6)) for angle in angles: x, y = projectile_trajectory(v0, angle) plt.plot(x, y, label=f'{angle}\u00b0') plt.title('Projectile Trajectories for Different Launch Angles') plt.xlabel('Distance (m)') plt.ylabel('Height (m)') plt.legend() plt.grid(True) plt.show()","title":"Create the plot"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Example 1: Approximation of \\( e^x \\) at \\( x = 0 \\) (Maclaurin Series) The Taylor series expansion of \\( e^x \\) around \\( x = 0 \\) (Maclaurin series) is: \\[ e^x = 1 + x + \\frac{x^2}{2!} + \\frac{x^3}{3!} + \\dots \\] For small \\( x \\) , we can approximate \\( e^x \\) using a few terms. Python Code for \\( e^x \\) Approximation import math def taylor_exp(x, n): \"\"\"Approximate e^x using the Taylor series expansion up to n terms.\"\"\" result = sum((x**i) / math.factorial(i) for i in range(n+1)) return result # Example: Approximate e^x for x = 1 using 5 terms x_value = 1 n_terms = 5 approx = taylor_exp(x_value, n_terms) exact = math.exp(x_value) print(f\"Approximate e^{x_value} using {n_terms} terms: {approx}\") print(f\"Exact e^{x_value}: {exact}\") print(f\"Error: {abs(approx - exact)}\") Example 2: Approximation of \\( \\sin(x) \\) at \\( x = 0 \\) The Taylor series for \\( \\sin(x) \\) around \\( x = 0 \\) (Maclaurin series) is: \\[ \\sin(x) = x - \\frac{x^3}{3!} + \\frac{x^5}{5!} - \\frac{x^7}{7!} + \\dots \\] Python Code for \\( \\sin(x) \\) Approximation def taylor_sin(x, n): \"\"\"Approximate sin(x) using the Taylor series expansion up to n terms.\"\"\" result = sum(((-1)**i * x**(2*i+1)) / math.factorial(2*i+1) for i in range(n+1)) return result # Example: Approximate sin(x) for x = \u03c0/4 using 5 terms x_value = math.pi / 4 n_terms = 5 approx = taylor_sin(x_value, n_terms) exact = math.sin(x_value) print(f\"Approximate sin({x_value}) using {n_terms} terms: {approx}\") print(f\"Exact sin({x_value}): {exact}\") print(f\"Error: {abs(approx - exact)}\") Example 3: Approximation of \\( \\ln(1+x) \\) at \\( x = 0 \\) The Taylor series for \\( \\ln(1+x) \\) around \\( x = 0 \\) is: \\[ \\ln(1+x) = x - \\frac{x^2}{2} + \\frac{x^3}{3} - \\frac{x^4}{4} + \\dots \\] Python Code for \\( \\ln(1+x) \\) Approximation def taylor_ln1p(x, n): \"\"\"Approximate ln(1+x) using the Taylor series expansion up to n terms.\"\"\" if abs(x) >= 1: raise ValueError(\"Series does not converge for |x| >= 1\") result = sum(((-1)**(i+1) * x**i) / i for i in range(1, n+1)) return result # Example: Approximate ln(1+x) for x = 0.5 using 5 terms x_value = 0.5 n_terms = 5 approx = taylor_ln1p(x_value, n_terms) exact = math.log(1 + x_value) print(f\"Approximate ln(1+{x_value}) using {n_terms} terms: {approx}\") print(f\"Exact ln(1+{x_value}): {exact}\") print(f\"Error: {abs(approx - exact)}\") Key Takeaways The more terms used, the more accurate the approximation. The error depends on the remainder term. Taylor series is useful in numerical computations where exact functions are costly.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#example-1-approximation-of-ex-at-x-0-maclaurin-series","text":"The Taylor series expansion of \\( e^x \\) around \\( x = 0 \\) (Maclaurin series) is: \\[ e^x = 1 + x + \\frac{x^2}{2!} + \\frac{x^3}{3!} + \\dots \\] For small \\( x \\) , we can approximate \\( e^x \\) using a few terms.","title":"Example 1: Approximation of \\( e^x \\) at \\( x = 0 \\) (Maclaurin Series)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#python-code-for-ex-approximation","text":"import math def taylor_exp(x, n): \"\"\"Approximate e^x using the Taylor series expansion up to n terms.\"\"\" result = sum((x**i) / math.factorial(i) for i in range(n+1)) return result # Example: Approximate e^x for x = 1 using 5 terms x_value = 1 n_terms = 5 approx = taylor_exp(x_value, n_terms) exact = math.exp(x_value) print(f\"Approximate e^{x_value} using {n_terms} terms: {approx}\") print(f\"Exact e^{x_value}: {exact}\") print(f\"Error: {abs(approx - exact)}\")","title":"Python Code for \\( e^x \\) Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#example-2-approximation-of-sinx-at-x-0","text":"The Taylor series for \\( \\sin(x) \\) around \\( x = 0 \\) (Maclaurin series) is: \\[ \\sin(x) = x - \\frac{x^3}{3!} + \\frac{x^5}{5!} - \\frac{x^7}{7!} + \\dots \\]","title":"Example 2: Approximation of \\( \\sin(x) \\) at \\( x = 0 \\)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#python-code-for-sinx-approximation","text":"def taylor_sin(x, n): \"\"\"Approximate sin(x) using the Taylor series expansion up to n terms.\"\"\" result = sum(((-1)**i * x**(2*i+1)) / math.factorial(2*i+1) for i in range(n+1)) return result # Example: Approximate sin(x) for x = \u03c0/4 using 5 terms x_value = math.pi / 4 n_terms = 5 approx = taylor_sin(x_value, n_terms) exact = math.sin(x_value) print(f\"Approximate sin({x_value}) using {n_terms} terms: {approx}\") print(f\"Exact sin({x_value}): {exact}\") print(f\"Error: {abs(approx - exact)}\")","title":"Python Code for \\( \\sin(x) \\) Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#example-3-approximation-of-ln1x-at-x-0","text":"The Taylor series for \\( \\ln(1+x) \\) around \\( x = 0 \\) is: \\[ \\ln(1+x) = x - \\frac{x^2}{2} + \\frac{x^3}{3} - \\frac{x^4}{4} + \\dots \\]","title":"Example 3: Approximation of \\( \\ln(1+x) \\) at \\( x = 0 \\)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#python-code-for-ln1x-approximation","text":"def taylor_ln1p(x, n): \"\"\"Approximate ln(1+x) using the Taylor series expansion up to n terms.\"\"\" if abs(x) >= 1: raise ValueError(\"Series does not converge for |x| >= 1\") result = sum(((-1)**(i+1) * x**i) / i for i in range(1, n+1)) return result # Example: Approximate ln(1+x) for x = 0.5 using 5 terms x_value = 0.5 n_terms = 5 approx = taylor_ln1p(x_value, n_terms) exact = math.log(1 + x_value) print(f\"Approximate ln(1+{x_value}) using {n_terms} terms: {approx}\") print(f\"Exact ln(1+{x_value}): {exact}\") print(f\"Error: {abs(approx - exact)}\")","title":"Python Code for \\( \\ln(1+x) \\) Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#key-takeaways","text":"The more terms used, the more accurate the approximation. The error depends on the remainder term. Taylor series is useful in numerical computations where exact functions are costly.","title":"Key Takeaways"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}